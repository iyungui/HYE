//
//  DDayView.swift
//  HWYU
//
//  Created by Ïù¥ÏúµÏùò on 1/6/24.
//

import SwiftUI

struct DDayView: View {
    let anniversaryDate = Calendar.current.date(from: DateComponents(year: 2023, month: 4, day: 5))!
    
    var imageNames: [String] {
        return (1...7).map { String(format: "image%02d", $0) }
    }

    @State var currentImageName: String = "image01"
    
    @State private var currentDaysCount = 0
    
    let timer = Timer.publish(every: 5, on: .main, in: .common).autoconnect()

    private func reload() {
        var newImage: String
        repeat {
            newImage = imageNames.randomElement() ?? "image01"
        } while newImage == currentImageName
        currentImageName = newImage
    }
    
    private func recount() {
        currentDaysCount = 0
        Timer.scheduledTimer(withTimeInterval: 0.003, repeats: true) { timer in
            if currentDaysCount < daysSinceAnniversary() {
                currentDaysCount += 1
            } else {
                timer.invalidate()
            }
        }
    }
    
    // Calculates the number of days since the anniversary
    private func daysSinceAnniversary() -> Int {
        let today = Date()
        guard today > anniversaryDate else { return 0 }

        let components = Calendar.current.dateComponents([.day], from: anniversaryDate, to: today)
        return components.day ?? 0
    }
    
    // Formats a date to "yyyy.MM.dd" format
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy.MM.dd"
        return formatter.string(from: date)
    }

    // Returns the current date as a string in "yyyy-MM-dd" format
    private func currentDateString() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        return formatter.string(from: Date())
    }
    
    @State private var heartCount: Int = 0
    @State private var showEggView: Bool = false
    
    
    var body: some View {
        NavigationStack {
            ZStack {
                Image(currentImageName)
                    .resizable()
                    .scaledToFit()
                
                LinearGradient(gradient: Gradient(colors: [.clear, .black.opacity(0.5)]), startPoint: .top, endPoint: .bottom)
                    .ignoresSafeArea()

                VStack(alignment: .center) {
                    HStack {
                        Text("ÌòúÏõê")
                            .font(Font.custom("S-CoreDream-5Medium", size: 17))
                        
                        Button {
                            reload()
                            recount()
                        } label: {
                            Image(systemName: "heart.fill")
                                .font(.title3)
                                .foregroundColor(.green)
                        }

                        Text("ÏúµÏùò")
                            .font(Font.custom("S-CoreDream-5Medium", size: 17))
                    }
                    .padding(.vertical)
                    
                    HStack(spacing: 0) {
                        Button("Ïö∞Î¶¨") {
                            heartCount += 1
                            print(heartCount)
                        }
                        .simultaneousGesture(LongPressGesture(minimumDuration: 2).onEnded { _ in
                            showEggView = true
                        })
                        .font(Font.custom("S-CoreDream-5Medium", size: 14))
                        .foregroundStyle(.gray)
                        
                        Text("Í∞Ä Ìï®ÍªòÌïú ÏßÄ Î≤åÏç® \(currentDaysCount)Ïùº!")
                            .font(Font.custom("S-CoreDream-5Medium", size: 14))
                            .foregroundStyle(.gray)
                    }
                    
                    Spacer()

                    HStack {
                        Text(formatDate(anniversaryDate))

                        NavigationLink(destination: ContentView()) {
                            Image(systemName: "heart.fill")
                                .foregroundColor(Color("mainColor"))
                        }
                        
                        Text("~")
                    }
                    .font(.headline)
                    .foregroundColor(.white)

                    Text(currentDateString())
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding(.bottom, 5)

                    HStack {
                        Button {
                            heartCount = 0
                            withAnimation {
                                reload()
                                recount()
                            }
                        } label: {
                            Text("\(currentDaysCount)")
                                .font(.largeTitle)
                                .fontWeight(.black)
                                .italic()
                        }
                        

                        Image(systemName: "arrowshape.up.fill")
                    }
                    
                    .foregroundColor(.white)
                    .shadow(color: .black, radius: 1, x: 1, y: 1)

                }
            }
            .sheet(isPresented: $showEggView) {
                EggView(showEggView: $showEggView, heartCount: $heartCount)
            }
            .onAppear {
                reload()
                recount()
            }
            .onReceive(timer) { _ in
                withAnimation {
                    reload()
                }
            }
            .navigationBarBackButtonHidden()
        }
    }
}

struct EggView: View {
    @Binding var showEggView: Bool
    @Binding var heartCount: Int
    @State private var currentPage: Int = 0
    @State private var showTabView: Bool = false
    
    var body: some View {
        VStack {
            Button {
                showTabView.toggle()
            } label: {
                Text("ÌòúÏõêÏù¥ÏóêÍ≤å")
                Text("2024-05-08")
            }
            .font(showTabView ? .caption2 : .footnote)
            .padding(10)
            .background(Color.gray.opacity(0.1))
            .cornerRadius(5)
            .foregroundColor(showTabView ? Color.blue : Color.gray)

            if showTabView {
                TabView(selection: $currentPage) {
                    ForEach(0..<min(heartCount, letterText.count), id: \.self) { index in
                        LetterView(showEggView: $showEggView, index: index)
                    }
                }
                .tabViewStyle(PageTabViewStyle())
                .indexViewStyle(PageIndexViewStyle(backgroundDisplayMode: .always))
                .transition(.slide)
                .animation(.easeInOut, value: currentPage)
            } else {
                ScrollView(.horizontal) {
                    HStack {
                        // Ïã§Ï†úÎ°ú ÌëúÏãúÌï† Ï±ÑÏõåÏßÑ ÌïòÌä∏Ïùò Í∞úÏàòÎäî min(heartCount, letterText.count)
                        let filledHeartCount = min(heartCount, letterText.count)
                        
                        ForEach(0..<filledHeartCount, id: \.self) { index in
                            Image(systemName: "heart.fill")
                                .foregroundColor(.red)
                                .padding(4)
                        }
                        
                        // ÎÇòÎ®∏ÏßÄ ÌïòÌä∏Ïùò Í∞úÏàòÎäî Ï†ÑÏ≤¥ Í∞úÏàòÏóêÏÑú Ï±ÑÏõåÏßÑ ÌïòÌä∏ Í∞úÏàòÎ•º Î∫Ä Í≤É
                        ForEach(0..<(letterText.count - filledHeartCount), id: \.self) { index in
                            Image(systemName: "heart")
                                .foregroundColor(.gray)
                                .padding(4)
                        }
                    }
                }
                .scrollIndicatorsFlash(onAppear: true)
                .frame(height: 100)

            }
        }
    }
}

let letterText: [String] = [
    "ÌòúÏõêÏù¥ÏóêÍ≤å",
    "ÏïàÎÖï ÌòúÏõêÏïÑ!! ÎÇòÎäî ÏúµÏùòÏïº. \nÏù¥Î≤àÏóêÎäî Ï°∞Í∏à ÌäπÎ≥ÑÌïú Î∞©ÏãùÏúºÎ°ú Ìé∏ÏßÄÎ•º Ïì∞Í≤å ÎêêÏñ¥.",
    "ÎÑàÍ∞Ä ÏïÑÎÇ†Î°úÍ∑∏ Î∞©ÏãùÏùÑ Îçî ÏÑ†Ìò∏ÌïòÎäî Í±∏ ÏïåÏßÄÎßå, Ïù¥Î≤àÏóêÎäî Ïñ¥Ï©î Ïàò ÏóÜÏù¥ Ïó¨Í∏∞Îã§Í∞Ä Ïì∞Í≤å ÎêêÎã§!",
    "Ïùå Ïù¥Î†áÍ≤å Ìïú Î¨∏Ïû•Ïî© ÎÑòÍ∏∞Î©¥ÏÑú Ïì∞ÎäîÍ≤ÉÎèÑ ÍΩ§ Í¥úÏ∞ÆÏùÄ Í≤É Í∞ôÏïÑ. \nÎÑàÎèÑ Í∑∏Î†áÏßÄ?",
    "ÏïÑÎ¨¥Ìäº Ïù¥Î≤àÏóî Ï¢Ä Îçî Îã§Î•¥Í≤å Ïç®Î≥¥Î†§Í≥† Ìï¥. ÌòúÏõêÏù¥ÏóêÍ≤å Ìï¥Ï£ºÍ≥† Ïã∂ÏùÄ ÎßêÏùÑ ÍæπÍæπ ÎàåÎü¨ÏÑú Ïó¨Í∏∞Ïóê Îã¥ÏïòÏñ¥.",
    "ÌòúÏõêÏù¥Í∞Ä ÏóÜÏóàÎçò ÏßÄÎÇú 100ÏùºÏùÄ Î¨¥Ï≤ô Îπ†Î•¥Í≤å ÏßÄÎÇòÍ∞Ñ Í≤É Í∞ôÏúºÎ©¥ÏÑúÎèÑ, ÎÑàÍ∞Ä ÎÑàÎ¨¥ Î≥¥Í≥† Ïã∂ÏùÄ ÏãúÍ∞ÑÏù¥ÏóàÏñ¥!!",
    "Ï†ïÎßê Î≥¥Í≥†Ïã∂Îã§ Ï°∞ÌòúÏõê! \nÏÇ¨ÎûëÌï¥ -!",
    "ÏÜîÏßÅÌïòÍ≤å ÎßêÌïòÎ©¥,\nÏù¥ Ïï±ÏùÑ Îã§Ïãú ÎßåÎìúÎäî Í≤å Ïù¥ Ìé∏ÏßÄÎ•º Ïì∞Îäî Í≤ÉÎ≥¥Îã§ Îçî Ïò§Îûò Í±∏Î¶¨Í∏∞Îäî ÌñàÏñ¥.",
    "Í∑∏Î†áÏßÄÎßå ÎÑàÎûë Í∞ôÏù¥ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Ïñ¥ÌîåÏùÑ ÎßåÎì§Í≥† Ïã∂ÏóàÏñ¥!",
    "ÎßòÏóê Îì§Î©¥ Îçî ÏóÖÎç∞Ïù¥Ìä∏ Ìï¥Î≥ºÍ≤å!",
    "ÌòúÏõêÏïÑ!",
    "ÌïúÍµ≠Ïò§Î©¥\nÎßõÏûàÎäî Í±∞ Îòê Í∞ôÏù¥ Î®πÏúºÎü¨ Í∞ÄÏûê.",
    "ÏÇ¨Ïö∞ÎÇòÎèÑ Í∞ÄÍ≥†,",
    "Ï∞úÏßàÎ∞©ÎèÑ Í∞ÄÏûê!",
    "Í∑∏Î¶¨Í≥† ÏÇºÍ≤πÏÇ¥ÎèÑ Î®πÍ≥† ÎßåÌôîÏπ¥ÌéòÎèÑ Í∞ÄÏûê",
    "Í∑∏Î¶¨Í≥† ÎÇòÎûë Í∞ôÏù¥ ÏûàÏûê!! ÏïåÏïòÏßÄ?",
    "(Í∑∏Îûò Í∑∏Î¶¨Í≥† ÎßàÎùºÌÉïÏù¥Îûë ÎßàÎùºÎ°úÏ†úÎèÑ Î®πÏûê)",
    "ÌòúÏõêÏïÑ! ÏÇ¨Ïã§ ÏßÄÍ∏à ÎÇ¥ Ïã¨Ï†ïÏùÄ",
    "100Ïùº Í∏∞ÎÖêÏù¥ÎùºÍ≥† ÎÑàÌïúÌÖå ÏÉà Ìé∏ÏßÄÎ•º Ï§¨ÏùÑ ÎïåÏôÄ ÏßÄÍ∏àÏùò ÎäêÎÇåÏù¥ ÎßéÏù¥ Îã¨Îùº",
    "Î≠îÍ∞Ä Ïó¨Îü¨Í∞ÄÏßÄ ÏÉùÍ∞ÅÏù¥ ÎßéÏù¥ Îì§Ïñ¥! ÎÑàÎûë Îñ®Ïñ¥ÏßÑ ÏãúÍ∞ÑÎßåÌÅº ÎÑàÎèÑ Ïù¥Îü∞Ï†ÄÎü∞ ÏÉùÍ∞ÅÏùÑ ÏóÑÏ≤≠ ÎßéÏù¥ ÌñàÍ≤†ÏßÄ?",
    "Í∑∏ÎãàÍπå ÌïúÍµ≠ÏôÄÏÑú Î™ªÎã§Ìïú ÏñòÍ∏∞, Î™ªÎã§Ìïú ÏãúÍ∞ÑÎì§, \nÏñºÍµ¥ Î≥¥Î©¥ÏÑú Ïö∞Î¶¨ ÏñòÍ∏∞ÌïòÏûê-! \nÏßÑÏã¨.",
    "Ïù¥Ïïº~~~~~",
    "Í∑∏Î†áÏßÄÎßå ÎÇ¥Í∞Ä ÎÑàÌïúÌÖå ÌïòÍ≥† Ïã∂ÏùÄ Îßê ÌïòÎÇòÎßå ÎΩëÏûêÎ©¥,",
    "Î≠êÏùº Í≤É Í∞ôÏïÑ?",
    "ÏÇ¨ÎûëÌï¥!!",
    "Ïù¥Ï†úÎäî \nüåë(Îã¨) ÎßåÌÅºÎèÑ ÏïÑÎãàÎùº",
    "Ïù¥Ï†úÎäî Ïùå..",
    "Ï†ÄÍ∏∞ ÏûàÎäî. ü™ê(Î™©ÏÑ±) ÎßåÌÅº Îçî ÏÇ¨ÎûëÌï¥!",
    "Ïù¥Ï†ú ÎÑàÎèÑ ÌéòÏù¥ÏßÄÎ•º Îçî ÎÑòÍ∏∞Í∏∞ Í∑ÄÏ∞ÆÍ≤†ÏßÄ?",
    "ÏïÑÎ¨¥Ìäº Ï°∞Ïã¨Ìûà ÌïúÍµ≠Ïóê Ïò§Î†¥. ÎÇòÎäî Ïó¨Í∏∞ Ïûò ÏûàÏùÑÍ≤å",
    "ÌòúÏõêÏù¥Î•º ÏÇ¨ÎûëÌïòÎäî\nÏù¥ÏúµÏùòÍ∞Ä."
]

struct LetterView: View {
    @Binding var showEggView: Bool
    var index: Int
    
    var images: [String] {
        return (1...7).map { String(format: "image%02d", $0) }
    }

    var body: some View {
        VStack {
            Image(images[index % images.count])
                .resizable()
                .scaledToFit()
                .frame(height: 200)
                .padding()
            
            Text(letterText[index % letterText.count])
                .font(.body)
                .padding()
            
            HStack {
                Spacer()
                Text("Page: \(index + 1) / \(letterText.count)")
                    .font(.caption)
                    .foregroundStyle(.gray)
                    .padding()
            }
            
            if index + 1 == letterText.count {
                Button("ÏïàÎÖï!") {
                    showEggView = false
                }
            }
        }
        .padding()
    }
}

#Preview {
    EggView(showEggView: .constant(false), heartCount: .constant(7))
}



/*
 === S-CoreDream-1Thin
 === S-CoreDream-2ExtraLight
 === S-CoreDream-4Regular
 === S-CoreDream-3Light
 === S-CoreDream-5Medium
 === S-CoreDream-6Bold
 === S-CoreDream-7ExtraBold
 === S-CoreDream-8Heavy
 === S-CoreDream-9Black
 
 
//            for family: String in UIFont.familyNames {
//                            print(family)
//                            for names : String in UIFont.fontNames(forFamilyName: family){
//                                print("=== \(names)")
//                            }
//                        }
 */
